@import url("undo-redo.css");
@import url("fira.css");

@keyframes gradient-animation {
  0% {
    background-position: right
  }
  100% {
    background-position: left
  }
}
:-moz-window-inactive {
  animation-play-state: paused;
}
::selection {
  background-color: var(--accent-translucent);
}

:root {
  /* Colors go here */
  --dark: #091540;
  --light: #7692ff;
  --light-font: #ABD2FA;
  --accent: #e60073;
  --accent-translucent: #e6007377;
  --midpoint: rgb(60.3% 24.82% 36.2%);
  --disabled: #a5a5a5;

  --gradient-continuous: linear-gradient(45deg, var(--accent), var(--light), var(--accent), var(--light));

  --corner-round: 0.2em;

  --bg: var(--light);
  font-size: min(1rem, 5vw);
  --main-font: "Fira Sans", sans-serif;
  --mono-font: "Fira Code", monospace;
}
@supports (font-variation-settings: normal) {
  :root { --mono-font: 'Fira Code VF', monospace; }
}

html, body {
  height: 100%;
}
body {
  display: flex;
  flex-direction: column;

  margin: 0;
  font-family: var(--main-font);
  color: var(--dark);
  background-color: var(--light);
}
a {
  color: var(--midpoint);
  text-decoration: none;
  border-radius: var(--corner-round);

  -webkit-background-clip: text;
  //noinspection CssInvalidPropertyValue
  background-clip: text;
  background-size: 400%;
  background-image: var(--gradient-continuous);

  animation: gradient-animation 1s infinite linear normal paused;
  transition: color 100ms ease-in-out,
  box-shadow 200ms ease-in-out;

  &:hover {
    color: transparent;
    animation-play-state: running;
  }

  box-shadow: 0 0 0 0 var(--bg),
  0 0 0 0 var(--accent);

  &:focus, &:focus-visible {
    outline: none;
    border: none;
    border-radius: var(--corner-round);

    box-shadow: 0 0 0 0.4em var(--bg),
    0 0 0 0.7em var(--accent);
  }
}
ul {
  padding-left: 1.5em;
}
.top {
  .head {
    --bg: var(--dark);

    flex: 0 1 auto;

    width: 100%;
    background-color: var(--dark);
    color: var(--light-font);
    text-align: center;

    display: grid;
    grid-template-columns: auto auto;
    justify-items: stretch;
    align-items: center;

    > a {
      position: relative;
      display: flow-root;
      width: max-content;

      font-size: clamp(1rem, 4rem, 14vw);
      text-decoration: none;
      padding: 0.5em;
      margin: 0.3em 0.2em 0.3em 0.4em;

      box-shadow: none;

      &:hover, &:focus, &:focus-visible {
        outline: none;

        path {
          stroke-width: 4
        }
      }

      svg {
        position: absolute;

        width: calc(100% + 0.5em);
        height: calc(100% + 0.5em);
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);

        stop {
          &:first-of-type {
            stop-color: var(--light);
          }

          &:last-of-type {
            stop-color: var(--accent);
          }
        }

        path {
          transition: stroke-width 200ms ease-in-out;
        }
      }

      span {
        position: relative;

        color: var(--dark);
        font-weight: 900;
        letter-spacing: 0.1em;
      }
    }

    nav ul {
      font-size: 1.6rem;

      display: flex;
      justify-content: flex-end;
      align-items: center;
      flex-wrap: wrap;

      li {
        padding: clamp(0.2em, 1em, 2vw);
        font-size: clamp(0.5rem, 100%, 5vw);
        text-align: right;

        a {

          color: inherit;

          &:hover {
            color: transparent;
          }
        }
      }
    }
  }

  svg {
    height: 5em;
    width: 100%;
    margin-top: -0.1em;
  }
}
.body {
  font-size: 1.5rem;
  margin: clamp(5%, 2em, 10vw);
  height: 100%;
}
.flex-body {
  display: flex;
  flex-direction: column;
  justify-content: center;
}
/* Note: ensure that you set the --rows variable in a style property for the number of rows needed. This can't be
  automated yet*/
.dual-row {
  display: grid;
  grid-template-columns: auto 0.1em auto;
  grid-template-rows: repeat(var(--rows, 1), auto) [rows-end];
  gap: 1em;
  align-items: start;
  line-height: 1.2;

  > div:nth-of-type(1) {
    grid-column: 2 / 3;
    grid-row: 1 / rows-end;
    justify-self: stretch;
    align-self: stretch;

    background: var(--accent);
    width: 100%;
    height: auto;
    border-radius: var(--corner-round);
  }

  --even-direction: left;
  --even-column: 3;
  --odd-direction: right;
  --odd-column: 1;

  /*
  This is a bit of a hack. It only works with a single hidden element I would like to figure out how to remove it at
  some point as well as the annoying tabindex onkeyup thing
   */
  > [hidden] ~ * {
    --even-direction: right;
    --even-column: 1;
    --odd-direction: left;
    --odd-column: 3;
  }

  > :nth-child(even) {
    justify-self: var(--even-direction);
    text-align: var(--even-direction);
    grid-column: var(--even-column);
  }

  > :nth-child(odd) {
    justify-self: var(--odd-direction);
    text-align: var(--odd-direction);
    grid-column: var(--odd-column);
  }

  ul {
    list-style: none;
    margin: 0;
    padding: 0;

    > li {
      margin: 0.5em 0;

      &:first-of-type {
        margin-top: 0;
      }
      &:last-of-type {
        margin-bottom: 0;
      }
    }
  }
}
code, .mono {
  font-family: var(--mono-font);
  font-feature-settings: "calt";
  font-variant-ligatures: contextual;

  letter-spacing: -0.1em;
}
code {
  background: #7777;
  border-radius: var(--corner-round);
  padding: 0.1em;
}
.color::before {
  content: "";
  display: inline-block;
  width: 1em;
  height: 1em;
  transform: translateY(30%);
  margin: 0.1em;

  background: var(--swatch);
  border-radius: var(--corner-round);
  border: 0.1em solid white;
}


.hero {
  margin: auto;
  width: max-content;

  display: grid;
  grid-template-columns: auto auto;
  justify-items: stretch;
  align-items: center;
  align-content: center;

  p, label {
    font-size: min(10rem, 13vw);
    line-height: 0.9;
    font-weight: 900;
    margin: 0;
    width: max-content;
  }

  label {
    grid-column: 1;
    color: var(--accent);
    text-align: center;
    justify-self: center;
    cursor: pointer;
  }

  div {
    overflow: hidden;
    width: 102%;
    padding-left: 1%;
    margin-left: -1%;
    margin-top: -2%;
    height: 130%;

    p {
      margin-left: -110%;
      margin-top: 2%;
      transition: margin-left 1s ease-in-out;
    }
  }

  input:checked + div p {
    margin-left: 0;
  }
}

.about {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
  --modifier: calc(70ch - 100%);
  gap: 2em;
  padding-bottom: clamp(5%, 2em, 10vw);

  font-size: min(1em, 5vw);

  > div {
    flex-grow: 1;
    flex-basis: calc(var(--modifier) * 999);
    max-width: 70ch;
  }
}

.locations {
  display: grid;
  justify-items: center;
  grid-template-columns: repeat(auto-fit, min(100%, 70ch));
  justify-content: center;
  gap: 2em;

  > div {
    width: min(70ch, 100%);
  }

  margin: auto;
  padding-bottom: clamp(5%, 2em, 10vw);

  div {
    display: grid;
    grid-template-rows: subgrid;
    grid-row: span 4;
    gap: 0.2em;

    h1 {
      margin: 0;
    }

    h2 {
      margin: 0;
    }

    p {
      margin: 0;
    }

    img {
      width: calc(100% - max(0ch, calc((1 / 20) * 100% + 1ch - (5ch / 2))) * 2);
      /* 0ch at 50ch and 1ch at 70ch. 1ch / 20ch = 1/20, b = 1ch - 5ch/2 */
      padding: max(0.2em, calc((1 / 20) * 100% + 1ch - (5ch / 2)));
      border-radius: calc(var(--corner-round) * 2);
      border: 0.3em solid var(--accent);
      background: var(--light-font);
      /* 0ch at 50ch and 1ch at 70ch. 1ch / 20ch = 1/20, b = 1ch - 5ch/2 */
      margin: max(0ch, calc((1 / 20) * 100% + 1ch - (5ch / 2)));
    }
  }
}

.get_connected_header {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
  --modifier: calc(80ch - 100%);
  gap: 2em;

  > div {
    flex-grow: 1;
    flex-basis: calc(var(--modifier) * 999);
    max-width: 70ch;
  }

  .form {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    align-content: flex-start;
    gap: 1em;

    h1 {
      margin-bottom: 0;
    }

    p {
      margin: 0;
    }

    h1, p {
      text-align: center;
    }

    form {
      align-items: center;

      label {
        font-size: min(1.5rem, 5vw);
      }

      input[type="number"] {
        -moz-appearance: textfield;

        &::-webkit-inner-spin-button, &::-webkit-outer-spin-button {
          display: none;
        }
      }

      input[type="checkbox"] {
        display: none;

        + label {
          margin: auto;
          cursor: pointer;

          span {
            display: grid;
            justify-items: center;
            align-items: center;
            width: 1em;
            height: 1em;

            background: var(--light-font);
            border: 0.15em solid var(--dark);
            border-radius: var(--corner-round);

            &::before, &::after {
              content: '';
              display: block;
              grid-column: 1 / 2;
              grid-row: 1 / 2;
              width: 0;
              height: 0.1em;
              background: var(--dark);
              border-radius: var(--corner-round);

              transition: width 200ms ease-in-out;
            }

            &::before {
              transform: rotate(45deg);
            }

            &::after {
              transform: rotate(135deg);
            }
          }

          border-radius: var(--corner-round);
          box-shadow: 0 0 0 0 var(--bg),
          0 0 0 0 var(--accent);
          transition: box-shadow 200ms ease-in-out;

          &:focus, &:focus-visible {
            outline: none;

            box-shadow: 0 0 0 0.4em var(--bg),
            0 0 0 0.7em var(--accent);
          }
        }

        &:checked + label span {
          &::before, &::after {
            width: calc(70% * 1.4142135624);
          }
        }
      }

      textarea {
        resize: vertical;
      }

      input, select, textarea {
        width: 100%;
        background-color: var(--light-font);

        border-radius: var(--corner-round);
        border: 0.15em solid var(--dark);

        box-shadow: 0 0 0 0 var(--bg),
        0 0 0 0 var(--accent);
        transition: box-shadow 200ms ease-in-out;

        &:focus, &:focus-visible {
          outline: none;

          box-shadow: 0 0 0 0.4em var(--bg),
          0 0 0 0.7em var(--accent);
        }

        &:disabled {
          border-color: var(--disabled);
          color: var(--disabled);
        }

        &:invalid {
          border-color: var(--accent);
        }
      }
    }

    > input[type="submit"] {
      width: 15ch;
      height: 3em;
      border-radius: var(--corner-round);
      border: 0.2em solid var(--accent);
      line-height: 1.5em;
      background: var(--light-font);

      cursor: pointer;

      box-shadow: 0 0 0 0 var(--bg),
      0 0 0 0 var(--accent);
      transition: box-shadow 200ms ease-in-out;

      &:focus, &:focus-visible {
        outline: none;
        border-radius: var(--corner-round);

        box-shadow: 0 0 0 0.4em var(--bg),
        0 0 0 0.7em var(--accent);
      }
    }
  }
}

.get_connected_body {
  padding-bottom: 1em;
}

.peers {
  display: grid;
  grid-template-columns: 0.7em auto  1fr repeat(4, auto) [row-end];
  grid-template-rows: auto repeat(var(--rows), auto) [column-end];
  align-items: center;
  justify-content: space-between;
  justify-items: start;
  column-gap: 1em;
  padding-bottom: 5em;

  font-size: min(1em, 2vw);

  --count: 1;

  .h1 {
    grid-row: 2 / span 1;
    grid-column: 1 / row-end;
    justify-self: center;

    height: 0.2em;
    width: calc(100% - 1em);

    border-radius: var(--corner-round);
    background: var(--accent);
  }

  .h2 {
    grid-row: 2 / column-end;
    grid-column: 3 / 4;

    height: calc(100% - 1em);
    width: 0.2em;

    border-radius: var(--corner-round);
    background: var(--accent);
  }

  .title {
    font-weight: bold;
  }

  .disclosure {
    grid-column: 1 / span 1;
    margin-top: 0.5em;

    label {
      display: block;
      cursor: pointer;

      width: 0;
      height: 0;
      border-top: calc(0.7em / 1.4142135624) solid transparent;
      border-bottom: calc(0.7em / 1.4142135624) solid transparent;
      border-left: 0.7em solid var(--dark);
      transition: transform 200ms ease-in-out,
      box-shadow 200ms ease-in-out;
      border-radius: var(--corner-round);

      box-shadow: 0 0 0 0 var(--bg),
      0 0 0 0 var(--accent);

      &:focus {
        outline: none;
      }

      &:focus-visible {
        outline: none;

        box-shadow: 0 0 0 0.4em var(--bg),
        0 0 0 0.7em var(--accent);
      }
    }
  }

  input[type="checkbox"]:checked + .disclosure label {
    transform: rotate(90deg);
  }

  span {
    margin-top: 0.5em;
  }

  span:nth-of-type(5n + 1) {
    /* Name */
    grid-column: 2 / span 1;
  }

  span:nth-of-type(5n + 2) {
    /* ASN */
    grid-column: 4 / span 1;
    justify-self: end;
  }

  span:nth-of-type(5n + 3) {
    /* IPv4 */
    grid-column: 5 / span 1;
  }

  span:nth-of-type(5n + 4) {
    /* IPv6 */
    grid-column: 6 / span 1;
  }

  span:nth-of-type(5n + 5) {
    /* Connection Types */
    grid-column: 7 / span 1;
  }
}

.faq {
  padding-bottom: 1em;
  font-size: min(1.5rem, 3vw);

  div:nth-of-type(odd) {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    gap: 0.5em;

    > label {
      display: block;
      cursor: pointer;

      width: 0;
      height: 0;
      border-top: calc(0.9em / 1.4142135624) solid transparent;
      border-bottom: calc(0.9em / 1.4142135624) solid transparent;
      border-left: 0.9em solid var(--dark);
      transition: transform 200ms ease-in-out,
      box-shadow 200ms ease-in-out;
      border-radius: var(--corner-round);

      box-shadow: 0 0 0 0 var(--bg),
      0 0 0 0 var(--accent);

      &:focus {
        outline: none;
      }

      &:focus-visible {
        outline: none;

        box-shadow: 0 0 0 0.4em var(--bg),
        0 0 0 0.7em var(--accent);
      }
    }

    h2 {
      margin: 0.1em 0;
    }
  }

  div:nth-of-type(even) {
    display: none;
    position: relative;
    margin-left: 1em;

    p {
      max-width: 70ch;
    }

    &:focus-within, :has(::selection) {
      height: auto;
    }

    &::before {
      content: "";
      display: block;
      position: absolute;

      height: calc(100% - 0.5em);
      width: 0.2em;
      top: 0;
      left: -1em;
      transform: translateY(0.25em);

      background: var(--accent);
      border-radius: var(--corner-round);
    }
  }

  input:checked,
  input:target {
    + div > label{
      transform: rotate(90deg);
    }
    + div + div {
      display: block;
    }
  }
  div:target {
    > label {
      transform: rotate(90deg);
    }
    + div {
      display: block;
    }
  }
}

.submitted_form {
  p {
    margin: auto;
    max-width: 70ch;
  }
}
