#! /usr/bin/env python3

import mysql.connector
from mysql.connector import errorcode
from colorit import *
from frozendict import frozendict

try:
	database = mysql.connector.connect(user='evix', password='***REMOVED***', host='127.0.0.1', database='evix', autocommit=True)
except mysql.connector.Error as err:
	print("Something went wrong with the database connection:")
	print(err)
	exit(1)

cursor = database.cursor(dictionary=True,buffered=True)

options=(
  "View",
  "Create",
  "Modify",
  "Delete",
)

objects=(
  "Requests",
  "Clients",
  "ASNs",
  "IPs",
  "Connections",
)

types=(
  "OpenVPN",
  "ZeroTier",
  "EoIP",
  "VXLAN",
  "Local/Ethernet/Other"
)

type_names={
  "OpenVPN":"openvpn",
  "ZeroTier":"zerotier",
  "EoIP":"eoip",
  "VXLAN":"vxlan",
  "Local/Ethernet/Other":"custom"
}

locations=(
  "Fremont",
  "Netherlands",
  "New Zealand",
  "Zurich",
  "Vancouver",
  "Frankfurt"
)

location_names={
  "Fremont":"fmt",
  "Netherlands":"ams",
  "New Zealand":"nz",
  "Zurich":"zur",
  "Vancouver":"van",
  "Frankfurt":"fra"
}

fields={
"Requests":("id","asn","name","contact","website","tunnel_location","tunnel_type","ipv4"),
"Clients":("id","name","website","contact"),
"ASNs":("asn","client_id"),
"IPs":("ip","version","asn","monitor","provisioned"),
"Connections":("id","client_id","type","server","tunnel_id","ip","additional_args"),
}

formats={
"Requests":"ID: {id}, ASN: {asn}, Name: {name}, Email: {contact}, Website: {website}, Location:{tunnel_location}, Type: {tunnel_type}, Needs v4: {ipv4}",
"Clients":"ID: {id}, Name: {name}, Website: {website}, Email: {contact}",
"ASNs":"ASN: {asn}, Client ID: {client_id}",
"IPs":"IP: {ip}, IPv{version}, ASN: {asn}, Monitor: {monitor}, Provisioned: {provisioned}",
"Connections":"ID: {id}, Client ID: {client_id}, Type: {type}, POP: {server}, Tunnel ID: {tunnel_id}, Remote IP: {ip}, Port: {additional_args}",
}

def ask(option_list):
	def get_line():
		print("Select option by number")
		for i,option in enumerate(option_list + ("Quit",)):
			print(color(f"  {i}: {option}", Colors.blue))
		result = input(color("-> ", Colors.green))
		if result == str(len(option_list)):
			database.commit()
			exit(0)
		return result
	return get_line

def ask_one(option_list):
	question = ask(option_list)
	answer = question()
	while not (answer.isdigit() and int(answer) < len(option_list)):
		answer = question()
	return option_list[int(answer)]

def get_result_for(line, type, other_type):
	if type == "Requests":
		if other_type == "Requests":
			return (line,)
		elif other_type == "Clients":
			cursor.execute("SELECT * FROM clients WHERE name=%(name)s OR website=%(website)s OR contact=%(contact)s", line)
			return tuple(cursor)
		elif other_type == "ASNs":
			cursor.execute("SELECT * FROM asns WHERE asn=%(asn)s", line)
			return tuple(cursor)
	elif type == "Clients":
		if other_type == "Requests":
			cursor.execute("SELECT * FROM clients WHERE name=%(name)s OR website=%(website)s OR contact=%(contact)s", line)
			return tuple(cursor)
		elif other_type == "Clients":
			return (line,)
		elif other_type == "ASNs":
			cursor.execute("SELECT * FROM asns WHERE client_id=%(id)s", line)
			return tuple(cursor)
		elif other_type == "IPs":
			cursor.execute("SELECT * FROM ips WHERE ips.asn in (SELECT asns.asn FROM asns WHERE client_id=%(id)s)", line)
			return tuple(cursor)
		elif other_type == "Connections":
			cursor.execute("SELECT * FROM connections WHERE client_id=%(id)s", line)
			return tuple(cursor)
	elif type == "ASNs":
		if other_type == "Requests":
			cursor.execute("SELECT * FROM requests WHERE asn=%(asn)s", line)
			return tuple(cursor)
		elif other_type == "Clients":
			cursor.execute("SELECT * FROM clients WHERE id=%(client_id)s", line)
			return tuple(cursor)
		elif other_type == "ASNs":
			return (line,)
		elif other_type == "IPs":
			cursor.execute("SELECT * FROM ips WHERE asn=%(asn)s", line)
			return tuple(cursor)
	elif type == "IPs":
		if other_type == "Clients":
			cursor.execute("SELECT * FROM clients WHERE id in (SELECT client_id FROM asns INNER JOIN ips ON asns.asn=ips.asn WHERE ips.ip=%(ip)s))", line)
			return tuple(cursor)
		elif other_type == "ASNs":
			cursor.execute("SELECT * FROM asns WHERE asn=%(asn)s", line)
			return tuple(cursor)
		elif other_type == "IPs":
			return (line,)
	elif type == "Connections":
		if other_type == "Clients":
			cursor.execute("SELECT * FROM clients WHERE id=%(client_id)s", line)
			return tuple(cursor)
		elif other_type == "Connections":
			return (line,)
	print("Not implemented yet")
	return tuple()

def search(object):
	print("What object do you want to search by?")
	search_type = ask_one(objects)
	print("What field do you want to search by?")
	field = ask_one(fields[search_type])
	value = input(color("Value: ", Colors.green))
	if value.isdigit():
		value = int(value)
	try:
		cursor.execute(f"SELECT * FROM {search_type.lower()} WHERE {field}=%s", (value,))
	except mysql.connector.Error as err:
		print("Error executing mysql query:", str(err))
		return search(object)
	result = {}
	for i in tuple(cursor):
		result[frozendict(i)] = get_result_for(i, search_type, object)
	return result,search_type

def build(type, defaults=dict(), check=False, ignore="id"):
	values = {}
	print(f"Enter value(s) for {type.lower()[:-1]}")
	for field in fields[type]:
		if ignore and field == ignore:
			continue
		if field in defaults:
			values[field] = input(color(f"{field} [{defaults[field]}]=> ", Colors.red))
			if values[field] == "":
				values[field] = str(defaults[field])
		else:
			values[field] = input(color(f"{field} => ", Colors.red))
		if values[field].isdigit():
			values[field] = int(values[field])
		if check:
			cursor.execute(f"SELECT * FROM {type.lower()} WHERE {field}=%({field})s", values)
			results = tuple(cursor)
			if results:
				print("Existing object(s) exist. Would you like to choose one of them?")
				strings = {formats[type].format(**i):i for i in results}
				result = ask_one(("None",) + tuple(strings.keys()))
				if result != "None":
					values = strings[result]
					break
	return values

def insert(object, table):
	values = ", ".join(f"{i}=%({i})s" for i in object)
	try:
		cursor.execute(f"INSERT INTO {table} SET {values}", object)
		tuple(cursor)
	except mysql.connector.Error as err:
		print("Could not insert object", str(err))


def edit(object, table, id_o, id="id"):
	values = ", ".join(f"{i}=%({i})s" for i in object)
	try:
		object["id_o"] = id_o
		cursor.execute(f"UPDATE {table} SET {values} WHERE {id}=%(id_o)s", object)
		tuple(cursor)
	except mysql.connector.Error as err:
		print("Could not edit object", str(err))


def create_connection(client_id, server=None, type=None, ips=None):
	connection = dict(client_id=client_id)
	if server:
		connection["server"] = server
	else:
		connection["server"] = location_names[ask_one(locations)]
	if type:
		connection["type"] = type
	else:
		connection["type"] = type_names[ask_one(types)]
	if connection["type"] in ("eoip", "vxlan"):
		cursor.execute("SELECT tunnel_id FROM connections WHERE server=%(server)s AND type=%(type)s", connection)
		results = tuple(cursor)
		if results:
			ids = tuple(int(i["tunnel_id"]) for i in results)
			ids = tuple(i for i in ids if (i+1) not in ids)
			connection["tunnel_id"] = str(min(ids)+1)
		else:
			connection["tunnel_id"] = input(color("Tunnel ID => ", Colors.red))
	else:
		connection["tunnel_id"] = input(color("Tunnel ID (interface,none for ovpn) => ", Colors.red))
	connection["ip"] = input(color("Remote IP (ZT ID, none for local) => ", Colors.red))
	connection["additional_args"] = ""
	if connection["type"] == "vxlan":
		connection["tunnel_id"] = input(color("Tunnel ID => ", Colors.red))
		connection["additional_args"] = input(color("Custom Port (blank for default) => ", Colors.red))
	elif connection["type"] == "zerotier":
		if ips:
			connection["additional_args"] = " ".join(ips)
		else:
			connection["additional_args"] = input(color("Assigned IPs (space seperated) => ", Colors.red))
	return connection


def create(type):
	if type == "Requests":
		result = build("Requests")
		insert(result, "requests")
	elif type == "Clients":
		result = build("Clients")
	elif type == "ASNs":
		client = build("Clients", check=True)
		if "id" not in client:
			print(client)
			insert(client, "clients")
			client["id"] = cursor.lastrowid
		asn = build("ASNs", {"client_id":client["id"]})
		insert(asn, "asns")
	elif type == "IPs":
		asn = build("ASNs", ignore="client_id", check=True)
		if "client_id" not in asn:
			print("Please use existing asn")
			create(type)
		version = input(color("IP version => ", Colors.red))
		version = version[-1:]
		if version not in ("4","6"):
			print("Please use 4 or 6 only")
			create(type)
		version = int(version)
		cursor.execute("SELECT * FROM ips WHERE version=%s", (version,))
		all_ips = tuple(int(i["ip"].split(":")[-1].split(".")[-1], (16 if version==6 else 10)) for i in cursor if ":6:" not in i["ip"])
		ip = all_ips[0]
		while ip in all_ips:
			ip += 1
			if version == 4:
				if ip > 250:
					print("No IPv4 avalible")
					return
				ok = False
				while not ok:
					cursor.execute("SELECT 1 FROM ips WHERE ip=%s", (f"2602:fed2:fff:ffff::{ip}",))
					results=tuple(cursor)
					if not results:
						ok=True
					else:
						ip += 1
		if version == 6:
			insert({"ip":f"2602:fed2:fff:ffff:6::{ip}","version":6,"asn":asn["asn"],"monitor":True,"provisioned":True}, "ips")
		else:
			insert({"ip":f"206.81.104.{ip}","version":4,"asn":asn["asn"],"monitor":True,"provisioned":True}, "ips")
			insert({"ip":f"2602:fed2:fff:ffff::{ip}","version":6,"asn":asn["asn"],"monitor":True,"provisioned":True}, "ips")
		print("New client details:")
		cursor.execute("SELECT * FROM ips WHERE asn=%s", (asn["asn"],))
		for ip in cursor:
			print(formats["IPs"].format(**ip))
	elif type == "Connections":
		client = build("Clients", check=True)
		if "id" not in client:
			insert(client, "clients")
			client["id"] = cursor.lastrowid
		connection = create_connection(client_id=client["id"])
		insert(connection, "connections")
	elif type == "Build from request":
		request = build("Requests", check=True)
		if "id" not in request:
			insert(request, "requests")
			request["id"] = cursor.lastrowid
		client = build("Clients", check=True, defaults=request)
		if "id" not in client:
			insert(client, "clients")
			client["id"] = cursor.lastrowid
		request["client_id"] = client["id"]
		asn = build("ASNs", check=True, defaults=request)
		insert(asn, "asns")
		version = 4 if request["ipv4"] else 6
		cursor.execute("SELECT * FROM ips WHERE version=%s", (version,))
		all_ips = tuple(int(i["ip"].split(":")[-1].split(".")[-1], 16 if version==6 else 10) for i in cursor if ":6:" not in i["ip"])
		ip = all_ips[0]
		ips = list()
		while ip in all_ips:
			ip += 1
			if version == 4:
				if ip > 250:
					print("No IPv4 avalible")
					return
				ok = False
				while not ok:
					cursor.execute("SELECT 1 FROM ips WHERE ip=%s", (f"2602:fed2:fff:ffff::{ip}",))
					results = tuple(cursor)
					if not results:
						ok=True
					else:
						ip += 1
		if version == 6:
			insert({"ip":f"2602:fed2:fff:ffff:6::{ip:x}","version":6,"asn":asn["asn"],"monitor":True,"provisioned":True}, "ips")
			ips.append(f"2602:fed2:fff:ffff:6::{ip:x}")
		else:
			insert({"ip":f"206.81.104.{ip}","version":4,"asn":asn["asn"],"monitor":True,"provisioned":True}, "ips")
			insert({"ip":f"2602:fed2:fff:ffff::{ip}","version":6,"asn":asn["asn"],"monitor":True,"provisioned":True}, "ips")
			ips.append(f"206.81.104.{ip}")
			ips.append(f"2602:fed2:fff:ffff:::{ip}")

		connection = create_connection(server=request["tunnel_location"], type=request["tunnel_type"], client_id=client["id"], ips=ips)
		insert(connection, "connections")
		connection["id"] = cursor.lastrowid

		print("New client details:")
		print(formats["Clients"].format(**client))
		print(formats["ASNs"].format(**asn))
		cursor.execute("SELECT * FROM ips WHERE asn=%s", (asn["asn"],))
		for ip in cursor:
			print(formats["IPs"].format(**ip))
		print(formats["Connections"].format(**connection))

		cursor.execute("DELETE FROM requests WHERE id=%s", (request["id"],))
		cursor.reset()



for option in iter(ask(options), str(len(options))):
	if not (option.isdigit() and int(option) < len(options)):
		continue
	option = options[int(option)]
	object = ask_one(objects + (("Build from request",) if option=="Create" else tuple()))
	if option == "View":
		results,result_type = search(object)
		if len(results) == 1 and len(results[tuple(results.keys()[0])][]) >= 1 and tuple(results.keys())[0] == frozendict(results[tuple(results.keys())[0]][0]):
			for result in results:
				for line in results[result]:
					print(formats[object].format(**line))
		else:
			for result in results:
				print(formats[result_type].format(**result))
				for line in results[result]:
					print(" -", formats[object].format(**line))
	elif option == "Create":
		create(object)
	elif option == "Modify":
		results,result_type = search(object)
		cont = True
		while cont:
			if len(results) == 1 and tuple(results.keys())[0] == frozendict(results[tuple(results.keys())[0]][0]):
				for result in results:
					for line in results[result]:
						print(formats[object].format(**line))
			else:
				for result in results:
					print(formats[result_type].format(**result))
					for line in results[result]:
						print(" -", formats[object].format(**line))
			key = input(color("Primay key (id,asn,ip) => ", Colors.red))
			if object == "ASNs":
				cursor.execute(f"SELECT * FROM {object.lower()} WHERE asn=%s", (int(key),))
			elif object == "IPs":
				cursor.execute(f"SELECT * FROM {object.lower()} WHERE ip=%s", (key,))
			else:
				cursor.execute(f"SELECT * FROM {object.lower()} WHERE id=%s", (int(key),))
			if not cursor.with_rows:
				print("Object not found")
				continue
			value = tuple(cursor)[0]
			if object == "ASNs":
				result = build(object, defaults=value)
				edit(result, object.lower(), id="asn", id_o=value["asn"])
			elif object == "IPs":
				result = build(object, defaults=value)
				edit(result, object.lower(), id="ip", id_o=value["ip"])
			else:
				result = build(object, defaults=value)
				edit(result, object.lower(), id_o=value["id"])
			print("Modify another?")
			if ask_one(("Yes","No")) == "Yes":
				cont = True
			else:
				cont = False
	elif option == "Delete":
		print(color("Caution, be sure to remove in the order: IP, ASN, Connection, Client to ensure that you do not leave orphan objects!", Colors.green))
		results,result_type = search(object)
		cont = True
		while cont:
			if len(results) == 1 and tuple(results.keys())[0] == frozendict(results[tuple(results.keys())[0]][0]):
				for result in results:
					for line in results[result]:
						print(formats[object].format(**line))
			else:
				for result in results:
					print(formats[result_type].format(**result))
					for line in results[result]:
						print(" -", formats[object].format(**line))
			key = input(color("Primay key (id,asn,ip) => ", Colors.red))
			print(color("Are you sure that you want to delete this object?", Colors.green))
			if ask_one(("Yes","No")) == "Yes":
				try:
					if object == "ASNs":
						cursor.execute(f"DELETE FROM {object.lower()} WHERE asn=%s", (int(key),))
					elif object == "IPs":
						cursor.execute(f"DELETE FROM {object.lower()} WHERE ip=%s", (key,))
					else:
						cursor.execute(f"DELETE FROM {object.lower()} WHERE id=%s", (int(key),))
				except mysql.connector.Error as err:
					print("Could not delete object:", err)
				tuple(cursor)
			print("Delete another?")
			if ask_one(("Yes","No")) == "Yes":
				cont = True
			else:
				cont = False
	else:
		print("Option not supported yet")
database.commit()
