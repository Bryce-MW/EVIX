#! /usr/bin/env python3
# NOTE(bryce): Written Bryce Wilson on 2020-09-13.
#  * 2020-09-14|>Bryce|>Fixed many typos and mistakes left in
#  * 2020-09-15|>Bryce|>Fixed many other mistakes and added OpenVPN script support
#  * 2020-11-28|>Bryce|>Use click instead of colorit because colorit is very broken and change formatting significantly
#  * 2020-11-30|>Bryce|>Add pingable and birdable
#  * 2020-12-01|>Bryce|>Add tree feature and refactor to allow that to be possible
#  * 2021-02-12|>Bryce|>Call ZT script when adding a ZT peer
#  * 2021-02-18|>Bryce|>Minor refactoring (major rewrite is needed)
#  * 2021-04-16|>Bryce|>Added JSON config

import ipaddress
import json
import subprocess

import mysql.connector
from click import secho, style
from frozendict import frozendict

with open("/evix/secret-config.json") as config_f:
    config = json.load(config_f)
database = None
cursor = None

try:
    database = mysql.connector.connect(user=config['database']['user'], password=config['database']['password'], host=config['database']['host'], database=config['database']['database'], autocommit=True)
    cursor = database.cursor(dictionary=True, buffered=True)
except mysql.connector.Error as err:
    print("Something went wrong with the database connection:")
    print(err)
    exit(1)

options = (
    "View",
    "Create",
    "Modify",
    "Delete",
)

objects = (
    "Requests",
    "Clients",
    "ASNs",
    "IPs",
    "Connections",
)

types = (
    "OpenVPN",
    "ZeroTier",
    "EoIP",
    "VXLAN",
    "Local/Ethernet/Other"
)

type_names = {
    "OpenVPN":              "openvpn",
    "ZeroTier":             "zerotier",
    "EoIP":                 "eoip",
    "VXLAN":                "vxlan",
    "Local/Ethernet/Other": "custom"
}

locations = (
    "Fremont",
    "Netherlands",
    "New Zealand",
    "Zurich",
    "Vancouver",
    "Frankfurt"
)

location_names = {
    "Fremont":     "fmt",
    "Netherlands": "ams",
    "New Zealand": "nz",
    "Zurich":      "zur",
    "Vancouver":   "van",
    "Frankfurt":   "fra"
}

fields = {
    "Requests":    ("id", "asn", "name", "contact", "website", "tunnel_location", "tunnel_type", "ipv4"),
    "Clients":     ("id", "name", "website", "contact"),
    "ASNs":        ("asn", "client_id"),
    "IPs":         ("ip", "version", "asn", "monitor", "provisioned", "pingable", "birdable"),
    "Connections": ("id", "client_id", "type", "server", "tunnel_id", "ip", "additional_args"),
}

formats = {
    "Requests":    "Request: {id}, ASN: {asn}, Name: {name}, Email: {contact}, Website: {website}, Location:{tunnel_location}, Type: {tunnel_type}, Needs v4: {ipv4}",
    "Clients":     "Client: {id}, Name: {name}, Website: {website}, Email: {contact}",
    "ASNs":        "ASN: {asn}, Client ID: {client_id}",
    "IPs":         "IP: {ip}, IPv{version}, ASN: {asn}, Monitor: {monitor}, Provisioned: {provisioned}, Pingable: {pingable}, Warnings sent: {birdable}",
    "Connections": "Connection: {id}, Client ID: {client_id}, Type: {type}, POP: {server}, Tunnel ID: {tunnel_id}, Remote IP: {ip}, Port: {additional_args}",
}


def ask(option_list):
    def get_line():
        print("Select option by number")
        for i, option in enumerate(option_list + ("Quit",)):
            secho(f"  {i}: {option}", fg='cyan')
        result = input(style("-> ", fg='red'))
        if result == str(len(option_list)):
            database.commit()
            exit(0)
        return result

    return get_line


def ask_one(option_list):
    question = ask(option_list)
    answer = question()
    while not (answer.isdigit() and int(answer) < len(option_list)):
        answer = question()
    return option_list[int(answer)]


def get_result_for(line, type_have, type_want):
    if type_have == "Requests":
        if type_want == "Requests":
            return (line,)
        elif type_want == "Clients":
            if line["website"]:
                cursor.execute("SELECT * FROM clients WHERE name=%(name)s OR website=%(website)s OR contact=%(contact)s", dict(line))
            else:
                cursor.execute("SELECT * FROM clients WHERE name=%(name)s OR contact=%(contact)s", dict(line))
            return tuple(cursor)
        elif type_want == "ASNs":
            cursor.execute("SELECT * FROM asns WHERE asn=%(asn)s", dict(line))
            return tuple(cursor)
        elif type_want == "IPs":
            asn = get_result_for(line, "Requests", "ASNs")
            if asn:
                return get_result_for(asn[0], "ASNs", "IPs")
            else:
                return tuple()
        elif type_want == "Connections":
            client = get_result_for(line, "Requests", "Clients")
            if client:
                return get_result_for(client[0], "Clients", "Connections")
            else:
                return tuple()
    elif type_have == "Clients":
        if type_want == "Requests":
            cursor.execute("SELECT * FROM requests WHERE name=%(name)s OR (website=%(website)s AND website<>'') OR contact=%(contact)s", dict(line))
            return tuple(cursor)
        elif type_want == "Clients":
            return (line,)
        elif type_want == "ASNs":
            cursor.execute("SELECT * FROM asns WHERE client_id=%(id)s", dict(line))
            return tuple(cursor)
        elif type_want == "IPs":
            cursor.execute("SELECT * FROM ips WHERE ips.asn in (SELECT asns.asn FROM asns WHERE client_id=%(id)s)", dict(line))
            return tuple(cursor)
        elif type_want == "Connections":
            cursor.execute("SELECT * FROM connections WHERE client_id=%(id)s", dict(line))
            return tuple(cursor)
    elif type_have == "ASNs":
        if type_want == "Requests":
            cursor.execute("SELECT * FROM requests WHERE asn=%(asn)s", dict(line))
            return tuple(cursor)
        elif type_want == "Clients":
            cursor.execute("SELECT * FROM clients WHERE id=%(client_id)s", dict(line))
            return tuple(cursor)
        elif type_want == "ASNs":
            return (line,)
        elif type_want == "IPs":
            cursor.execute("SELECT * FROM ips WHERE asn=%(asn)s", dict(line))
            return tuple(cursor)
        elif type_want == "Connections":
            client = get_result_for(line, "ASNs", "Clients")
            if client:
                return get_result_for(client[0], "Clients", "Connections")
            else:
                return tuple()
    elif type_have == "IPs":
        if type_want == "Requests":
            asn = get_result_for(line, "IPs", "ASNs")
            if asn:
                return get_result_for(asn[0], "ASNs", "Requests")
            else:
                return tuple()
        elif type_want == "Clients":
            cursor.execute("SELECT * FROM clients WHERE EXISTS (SELECT 1 FROM asns INNER JOIN ips ON asns.asn=ips.asn WHERE ips.ip=%(ip)s AND asns.client_id=clients.id)", dict(line))
            return tuple(cursor)
        elif type_want == "ASNs":
            cursor.execute("SELECT * FROM asns WHERE asn=%(asn)s", dict(line))
            return tuple(cursor)
        elif type_want == "IPs":
            return (line,)
        elif type_want == "Connections":
            client = get_result_for(line, "IPs", "Clients")
            if client:
                return get_result_for(client[0], "Clients", "IPs")
            else:
                return tuple()
    elif type_have == "Connections":
        if type_want == "Requests":
            client = get_result_for(line, "Connections", "Clients")
            if client:
                return get_result_for(client[0], "Clients", "Requests")
            else:
                return tuple()
        elif type_want == "Clients":
            cursor.execute("SELECT * FROM clients WHERE id=%(client_id)s", dict(line))
            return tuple(cursor)
        elif type_want == "ASNs":
            client = get_result_for(line, "Connections", "Clients")
            if client:
                return get_result_for(client[0], "Clients", "ASNs")
            else:
                return tuple()
        elif type_want == "IPs":
            client = get_result_for(line, "Connections", "Clients")
            if client:
                return get_result_for(client[0], "Clients", "IPs")
            else:
                return tuple()
        elif type_want == "Connections":
            return (line,)
    print(f"Not implemented yet ({type_have} to {type_want})")
    return tuple()


def ask_type_field():
    print("What object do you want to search by?")
    search_type = ask_one(objects)
    print("What field do you want to search by?")
    field = ask_one(fields[search_type])
    return search_type, field


def search():
    search_type, field = ask_type_field()
    value = input(style("Value: ", fg='green'))
    if value.isdigit():
        value = int(value)
    try:
        cursor.execute(f"SELECT * FROM {search_type.lower()} WHERE {field}=%s", (value,))
    except mysql.connector.Error as sql_error:
        print("Error executing mysql query:", str(sql_error))
        return search()
    result = {}
    for i in tuple(cursor):
        result[frozendict(i)] = get_result_for(i, search_type, search_type)
    return result, search_type


def build(obj_type, defaults=None, check=False, ignore="id"):
    if defaults is None:
        defaults = dict()
    values = {}
    print(f"Enter value(s) for {obj_type.lower()[:-1]}")
    for field in fields[obj_type]:
        if ignore and field == ignore:
            continue
        if field in defaults:
            values[field] = input(style(f"{field} [{defaults[field]}]=> ", fg='green'))
            if values[field] == "":
                values[field] = str(defaults[field])
        else:
            values[field] = input(style(f"{field} => ", fg='green'))
        if values[field].isdigit():
            values[field] = int(values[field])
        if check and values[field]:
            cursor.execute(f"SELECT * FROM {obj_type.lower()} WHERE {field}=%({field})s", values)
            results = tuple(cursor)
            if results:
                print("Existing object(s) exist. Would you like to choose one of them?")
                strings = {formats[obj_type].format(**i): i for i in results}
                result = ask_one(("None",) + tuple(strings.keys()))
                if result != "None":
                    values = strings[result]
                    break
    return values


def insert(obj, table):
    values = ", ".join(f"{i}=%({i})s" for i in obj)
    try:
        cursor.execute(f"INSERT INTO {table} SET {values}", obj)
        tuple(cursor)
    except mysql.connector.Error as sql_error:
        print("Could not insert object", str(sql_error))


def edit(obj, table, id_o, id_column="id"):
    values = ", ".join(f"{i}=%({i})s" for i in obj)
    try:
        obj["id_o"] = id_o
        cursor.execute(f"UPDATE {table} SET {values} WHERE {id_column}=%(id_o)s", obj)
        tuple(cursor)
    except mysql.connector.Error as sql_error:
        print("Could not edit object", str(sql_error))


def create_connection(client_id, server=None, obj_type=None, ips=None, asn=None):
    connection = dict(client_id=client_id)
    if server:
        connection["server"] = server
    else:
        connection["server"] = location_names[ask_one(locations)]

    if obj_type:
        connection["type"] = obj_type
    else:
        connection["type"] = type_names[ask_one(types)]

    if connection["type"] in ("eoip", "vxlan", "custom", "zerotier"):
        cursor.execute("SELECT tunnel_id FROM connections WHERE server=%(server)s AND type=%(type)s", connection)
        results = tuple(cursor)
        if results:
            ids = tuple(int(i["tunnel_id"]) for i in results)
            ids = tuple(i for i in ids if (i + 1) not in ids)
            connection["tunnel_id"] = str(min(ids) + 1)
        else:
            connection["tunnel_id"] = input(style("Tunnel ID (use 100 if no preference) => ", fg='green'))
    elif connection["type"] == "openvpn":
        pass
    else:
        connection["tunnel_id"] = input(style("Tunnel ID (Just put 100 if you don't know) => ", fg='green'))

    if connection["type"] not in ("custom", "openvpn"):
        connection["ip"] = input(style("Remote IP or ZT ID => ", fg='green'))
    else:
        connection["ip"] = ""

    connection["additional_args"] = ""

    if connection["type"] == "vxlan":
        connection["additional_args"] = input(style("Custom Port (blank for default) => ", fg='green'))
    elif connection["type"] == "zerotier":
        if ips:
            connection["additional_args"] = " ".join(ips)
        else:
            connection["additional_args"] = input(style("Assigned IPs (space separated) => ", fg='green'))
        subprocess.run(["/evix/admin/zt", "add", connection["ip"], connection["additional_args"]])
    elif connection["type"] == "openvpn":
        if not asn:
            cursor.execute("SELECT * FROM asns WHERE client_id=%s", (client_id,))
            secho("ASNs Found:", fg="blue")
            for i in tuple(cursor):
                secho(" - " + formats["ASNs"].format(**i), fg="green")
            asn = input(style("ASN => ", fg='green'))
        connection["tunnel_id"] = asn
        ipv4 = []
        ipv6 = []
        if not ips:
            try:
                cursor.execute("SELECT * FROM asns WHERE asn=%s", (asn,))
            except mysql.connector.Error as sql_error:
                print("Error executing mysql query:", str(sql_error))
            initial_result = {}
            for i in tuple(cursor):
                initial_result[frozendict(i)] = get_result_for(i, "ASNs", "ASNs")
            ips = []
            for i in initial_result:
                additional_ips = get_result_for(i, "ASNs", "IPs")
                for j in additional_ips:
                    ips.append(j["ip"])
        for ip in ips:
            if ipaddress.ip_address(ip).version == 4:
                ipv4.append(ip)
            else:
                ipv6.append(ip)

        if len(ipv4) > 0:
            secho("IPv4 Found:", fg="blue")
            for ip in ipv4:
                secho(" - " + ip, fg="green")

        ipv4 = input(style("IPv4 (blank for none)=> ", fg='green'))

        if len(ipv6) > 0:
            secho("IPv6 Found:", fg="blue")
            for ip in ipv6:
                secho(" - " + ip, fg="green")

        ipv6 = input(style("IPv6 (blank for none)=> ", fg='green'))
        connection["additional_args"] = ipv4 + " " + ipv6
        subprocess.run(["/evix/scripts/root/openvpn_configure.sh", str(asn), ipv4 if ipv4 else "noipv4", ipv6])
    return connection


def create(obj_type):
    if obj_type == "Requests":
        result = build("Requests")
        insert(result, "requests")
    elif obj_type == "Clients":
        result = build("Clients")
        insert(result, "clients")
    elif obj_type == "ASNs":
        client = build("Clients", check=True)
        if "id" not in client:
            print(client)
            insert(client, "clients")
            client["id"] = cursor.lastrowid
        asn = build("ASNs", {"client_id": client["id"]})
        insert(asn, "asns")
    elif obj_type == "IPs":
        asn = build("ASNs", ignore="client_id", check=True)
        if "client_id" not in asn:
            print("Please use existing asn")
            create(obj_type)
        version = input(style("IP version => ", fg='green'))
        version = version[-1:]
        if version not in ("4", "6"):
            print("Please use 4 or 6 only")
            create(obj_type)
        version = int(version)
        cursor.execute("SELECT * FROM ips WHERE version=%s", (version,))
        all_ips = sorted(tuple(int(i["ip"].split(":")[-1].split(".")[-1], 16 if version == 6 else 10) for i in cursor if (version == 4 and ":6:" not in i["ip"]) or (version == 6 and ":6:" in i["ip"])))
        ip = all_ips[0]
        while ip in all_ips:
            ip += 1
            if version == 4:
                if ip > 250:
                    print("No IPv4 avalible")
                    return
                ok = False
                while not ok:
                    cursor.execute("SELECT 1 FROM ips WHERE ip=%s", (f"2602:fed2:fff:ffff::{ip}",))
                    results = tuple(cursor)
                    if not results:
                        ok = True
                    else:
                        ip += 1
        if version == 6:
            insert({"ip": f"2602:fed2:fff:ffff:6::{ip:x}", "version": 6, "asn": asn["asn"], "monitor": True, "provisioned": True}, "ips")
        else:
            insert({"ip": f"206.81.104.{ip}", "version": 4, "asn": asn["asn"], "monitor": True, "provisioned": True}, "ips")
            insert({"ip": f"2602:fed2:fff:ffff::{ip}", "version": 6, "asn": asn["asn"], "monitor": True, "provisioned": True}, "ips")
        print("New client details:")
        cursor.execute("SELECT * FROM ips WHERE asn=%s", (asn["asn"],))
        for ip in cursor:
            print(formats["IPs"].format(**ip))
    elif obj_type == "Connections":
        client = build("Clients", check=True)
        if "id" not in client:
            insert(client, "clients")
            client["id"] = cursor.lastrowid
        connection = create_connection(client_id=client["id"])
        insert(connection, "connections")

    elif obj_type == "Build from request":
        request = build("Requests", check=True)
        if "id" not in request:
            insert(request, "requests")
            request["id"] = cursor.lastrowid
        client = build("Clients", check=True, defaults=request)
        if "id" not in client:
            insert(client, "clients")
            client["id"] = cursor.lastrowid
        request["client_id"] = client["id"]
        asn = build("ASNs", check=True, defaults=request)
        if "client_id" not in asn:
            insert(asn, "asns")
            asn["id"] = cursor.lastrowid
        version = 4 if request["ipv4"] else 6
        cursor.execute("SELECT * FROM ips WHERE version=%s", (version,))
        all_ips = sorted(tuple(int(i["ip"].split(":")[-1].split(".")[-1], 16 if version == 6 else 10) for i in cursor if (version == 4 and ":6:" not in i["ip"]) or (version == 6 and ":6:" in i["ip"])))
        ip = all_ips[0]
        ips = list()
        while ip in all_ips:
            ip += 1
            if version == 4:
                if ip > 250:
                    print("No IPv4 avalible")
                    return
                ok = False
                while not ok:
                    cursor.execute("SELECT 1 FROM ips WHERE ip=%s", (f"2602:fed2:fff:ffff::{ip}",))
                    results = tuple(cursor)
                    if not results:
                        ok = True
                    else:
                        ip += 1
        if version == 6:
            insert({"ip": f"2602:fed2:fff:ffff:6::{ip:x}", "version": 6, "asn": asn["asn"], "monitor": True, "provisioned": True}, "ips")
            ips.append(f"2602:fed2:fff:ffff:6::{ip:x}")
        else:
            insert({"ip": f"206.81.104.{ip}", "version": 4, "asn": asn["asn"], "monitor": True, "provisioned": True}, "ips")
            insert({"ip": f"2602:fed2:fff:ffff::{ip}", "version": 6, "asn": asn["asn"], "monitor": True, "provisioned": True}, "ips")
            ips.append(f"206.81.104.{ip}")
            ips.append(f"2602:fed2:fff:ffff::{ip}")

        connection = create_connection(server=request["tunnel_location"], obj_type=request["tunnel_type"], client_id=client["id"], ips=ips, asn=asn["asn"])
        insert(connection, "connections")
        connection["id"] = cursor.lastrowid

        print("New client details:")
        print(formats["Clients"].format(**client))
        print(formats["ASNs"].format(**asn))
        cursor.execute("SELECT * FROM ips WHERE asn=%s", (asn["asn"],))
        for ip in cursor:
            print(formats["IPs"].format(**ip))
        print(formats["Connections"].format(**connection))

        cursor.execute("DELETE FROM requests WHERE id=%s", (request["id"],))
        cursor.reset()


def main():
    for option in iter(ask(options), str(len(options))):
        if not (option.isdigit() and int(option) >= 0):
            continue
        asn = None
        if int(option) > len(options):
            asn = int(option)
            option = "View"
        else:
            option = options[int(option)]
        if option == "View":
            if asn:
                try:
                    cursor.execute("SELECT * FROM asns WHERE asn=%s", (asn,))
                except mysql.connector.Error as sql_error:
                    print("Error executing mysql query:", str(sql_error))
                    continue
                initial_result = {}
                for i in tuple(cursor):
                    initial_result[frozendict(i)] = get_result_for(i, "ASNs", "ASNs")
                search_type = "ASNs"
            else:
                initial_result, search_type = search()
            for database_entry in initial_result:
                requests = get_result_for(database_entry, search_type, "Requests")
                if requests:
                    secho("Requests:", fg="blue")
                    for request in requests:
                        secho(" - " + formats["Requests"].format(**request), fg="green")

                clients = get_result_for(database_entry, search_type, "Clients")
                if clients:
                    secho("Trees:", fg="blue")
                    for client in clients:
                        secho(" - " + formats["Clients"].format(**client), fg="green")
                        asns = get_result_for(client, "Clients", "ASNs")
                        for asn in asns:
                            secho("  - " + formats["ASNs"].format(**asn), fg="green")
                            ips = get_result_for(asn, "ASNs", "IPs")
                            for ip in ips:
                                secho("   - " + formats["IPs"].format(**ip), fg="green")
                        connections = get_result_for(client, "Clients", "Connections")
                        for connection in connections:
                            secho("  - " + formats["Connections"].format(**connection), fg="green")
        elif option == "Create":
            obj = ask_one(objects + (("Build from request",) if option == "Create" else tuple()))
            create(obj)
        elif option == "Modify":
            obj = ask_one(objects + (("Build from request",) if option == "Create" else tuple()))
            cont = True
            while cont:
                key = input(style("Primary key (id,asn,ip) => ", fg='green'))
                if obj == "ASNs":
                    cursor.execute(f"SELECT * FROM {obj.lower()} WHERE asn=%s", (int(key),))
                elif obj == "IPs":
                    cursor.execute(f"SELECT * FROM {obj.lower()} WHERE ip=%s", (key,))
                else:
                    cursor.execute(f"SELECT * FROM {obj.lower()} WHERE id=%s", (int(key),))
                if not cursor.with_rows:
                    print("Object not found")
                    continue
                value = tuple(cursor)[0]
                if obj == "ASNs":
                    result = build(obj, defaults=value)
                    edit(result, obj.lower(), id_column="asn", id_o=value["asn"])
                elif obj == "IPs":
                    result = build(obj, defaults=value)
                    edit(result, obj.lower(), id_column="ip", id_o=value["ip"])
                else:
                    result = build(obj, defaults=value)
                    edit(result, obj.lower(), id_o=value["id"])
                print("Modify another?")
                if ask_one(("Yes", "No")) == "Yes":
                    cont = True
                else:
                    cont = False
        elif option == "Delete":
            obj = ask_one(objects + (("Build from request",) if option == "Create" else tuple()))
            secho("Caution, be sure to remove in the order: IP, ASN, Connection, Client or you will get errors!", fg='green')
            cont = True
            while cont:
                key = input(style("Primary key (id,asn,ip) => ", fg='green'))
                secho("Are you sure that you want to delete this object?", fg='green')
                if ask_one(("Yes", "No")) == "Yes":
                    try:
                        if obj == "ASNs":
                            cursor.execute(f"DELETE FROM {obj.lower()} WHERE asn=%s", (int(key),))
                        elif obj == "IPs":
                            cursor.execute(f"DELETE FROM {obj.lower()} WHERE ip=%s", (key,))
                        else:
                            cursor.execute(f"DELETE FROM {obj.lower()} WHERE id=%s", (int(key),))
                    except mysql.connector.Error as sql_error:
                        print("Could not delete object:", sql_error)
                    tuple(cursor)
                print("Delete another?")
                if ask_one(("Yes", "No")) == "Yes":
                    cont = True
                else:
                    cont = False
        else:
            print("Option not supported yet")


if __name__ == "__main__":
    main()
else:
    print("This program can not be used as a library (for now)")

database.commit()
